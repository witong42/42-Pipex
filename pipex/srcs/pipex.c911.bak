/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   pipex.c911.bak                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: witong <witong@student.42.fr>              +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/09 10:58:42 by witong            #+#    #+#             */
/*   Updated: 2024/11/09 17:50:48 by witong           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "pipex.h"


void	find_path(t_pipex *params)
{
	char **env;

	env = params->env;
	while (*env && ft_strncmp("PATH=", *env, 5) != 0)
	{
		printf("ok");
		env++;
	}
	if (!*env)
		print_error("Error finding PATH variable\n");
	params->paths = ft_split(*env + 5, ':');
	if (!params->paths)
		print_error("Error splitting PATH\n");
}

void	execute(t_pipex *params, int cmd_index)
{
	char	**cmds;
	char	*path;
	char	*full_path;
	int		i;

	find_path(params);
	cmds = ft_split(params->cmds[cmd_index], ' ');
	if(!cmds || !cmds[0])
		print_error("Error malloc split");
	i = 0;
	path = NULL;
	full_path = NULL;
	while (params->paths[i])
	{
	path = ft_strjoin(params->paths[i], "/");
	full_path = ft_strjoin(path, cmds[0]);
	free(path);
	if (access(full_path, X_OK) == 0)
		break;
	free(full_path);
	i++;
	}
	close(params->infile);
	close(params->outfile);
	execve(full_path, cmds, params->env);
	print_perror("execve error");
    exit(EXIT_FAILURE);
}

void child_process(t_pipex *params, int *fd, int is_first)
{
	if (is_first)
	{
		if (dup2(fd[1], 1) == -1)
			print_error("Error dup2 failure");
		close(fd[1]);
		if (dup2(params->infile, 0) == -1)
			print_error("Error dup2 failure");
		close(fd[0]);
		execute(params, 0);
	}
	else
	{
		if (dup2(params->outfile, 1) == -1)
			print_error("Error dup2 failure");
		close(fd[1]);
		if (dup2(fd[0], 0) == -1)
			print_error("Error dup2 failure");
		close(fd[0]);
		execute(params, 1);
	}
	free_params(params);
	exit(EXIT_FAILURE);
}


void	pipex(t_pipex *params)
{
	int	fd[2];
	pid_t child1;
	pid_t child2;

	if (pipe(fd) == -1)
		print_perror("Error Pipe.\n");
	child1 = fork();
	if (child1 == -1)
		print_error("Error Fork.\n");
	if (child1 == 0)
		child_process(params, fd, 1);
	child2 = fork();
	if (child2 == -1)
		print_error("Error Fork.\n");
	if (child2 == 0)
		child_process(params, fd, 0);
	waitpid(child1, NULL, 0);
	waitpid(child2, NULL, 0);
	close(fd[0]);
	close(fd[1]);
}

t_pipex	*init(char **av, char **env)
{
	t_pipex *params;

	params = malloc(sizeof(t_pipex));
	printf("OK");
	if (!params)
		print_error("Memory allocation failed\n");
	params->cmds = &av[2];
	params->env = env;
	params->infile = open(av[1], O_RDONLY);
	if (params->infile < 0)
		print_perror("Error Infile.\n");
	params->outfile = open(av[4], O_WRONLY | O_CREAT | O_TRUNC, 0644);
	if (params->outfile < 0)
	{
		close(params->infile);
		print_perror("Error Outfile.\n");
	}
	return (params);
}

int main(int ac, char **av, char **env)
{
	t_pipex	*params;

	if (ac != 5)
		print_perror("Invalid number of arguments.\n");
	params = init(av, env);
	pipex(params);
	return (0);
}

